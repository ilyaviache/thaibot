import { Injectable, OnModuleInit } from '@nestjs/common';
import { PrismaService } from 'nestjs-prisma';
import { SettingKey, Setting, Areas, Presets } from '@prisma/client';

import { Markup } from 'telegraf';
import { COMMANDS } from './settings.module';

@Injectable()
export class SettingsService implements OnModuleInit {
  private settings: Setting;
  private areas: Areas[]; // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏, —Ç–∏–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º
  private presets: Presets[]; // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏, —Ç–∏–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º

  constructor(private readonly prisma: PrismaService) {}

  async onModuleInit() {
    await this.loadSettingsFromDb();
    await this.loadAreasFromDb();
    await this.loadPresetsFromDb();
  }

  private async loadSettingsFromDb() {
    this.settings = await this.prisma.setting.findUnique({
      where: {
        id: SettingKey.MAIN,
      },
    });
  }

  private async loadAreasFromDb() {
    this.areas = await this.prisma.areas.findMany();
  }

  private async loadPresetsFromDb() {
    this.presets = await this.prisma.presets.findMany();
  }

  TEXTS(...args: string[]): string {
    return this.settings.TEXTS;
  }

  fillTexts(text: string, ...args: string[]): string {
    return text.replace(
      /\$(\d+)/g,
      (_, index) => args[Number(index) - 1] || ''
    );
  }
  E;
  AREAS() {
    return this.areas;
  }

  PRESETS() {
    return this.presets;
  }

  MENU_BUTTONS() {
    return {
      TASKS: { text: 'üïµÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∫–æ–π' },
      ACCOUNTS: { text: 'üö´ –°—Ç–æ–ø –∞–∫–∫–∞—É–Ω—Ç—ã' },
      AREA: { text: 'üèù –†–µ–≥–∏–æ–Ω —Ä–∞–±–æ—Ç—ã' },
      WORKS: { text: '‚ùáÔ∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞' },
      WORDS: { text: 'üö´ –°—Ç–æ–ø —Ñ—Ä–∞–∑—ã' },
      PAYMENT: { text: 'üí∏ –û–ø–ª–∞—Ç–∞' },
      CHANNELS: { text: 'üö´ –°—Ç–æ–ø —á–∞—Ç—ã' },
      SUPPORT: { text: 'üôã‚Äç‚ôÇÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞' },
      MAIN_MENU: { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },

      ACCOUNTS_LIST: { text: 'üìã –°–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤' },
      ACCOUNTS_ADD: { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π' },
      ACCOUNTS_DELETE_ALL: { text: 'üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ' },

      WORKS_LIST: { text: 'üìã –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞' },
      WORKS_ADD: { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ' },
      WORKS_DELETE_ALL: { text: 'üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ' },

      WORDS_LIST: { text: 'üìã –°–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Ñ—Ä–∞–∑' },
      WORDS_ADD: { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ' },
      WORDS_DELETE_ALL: { text: 'üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ' },

      CHANNELS_LIST: { text: 'üìã –°–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —á–∞—Ç–æ–≤' },
      CHANNELS_ADD: { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–π —á–∞—Ç' },
      CHANNELS_DELETE_ALL: { text: 'üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ' },

      BACK_TO_MENU: { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é' },
      OK: { text: '‚úÖ' },
      CANCEL: { text: '‚õîÔ∏è' },
      BACK: { text: '‚¨Ö –ù–∞–∑–∞–¥', callback_data: 'BACK' },
    };
  }

  COMMANDS() {
    return {
      START: 'start',
      BACK: 'BACK',
      OK: 'OK',
      NO: 'CANCEL',
      CANCEL: 'CANCEL',
      CONTINUE: 'CONTINUE',
      START_LISTEN: 'START_LISTEN',
      ADD_TASK: 'ADD_TASK',
    };
  }

  BUTTONS() {
    return {
      BACK: Markup.button.callback('‚¨Ö –ù–∞–∑–∞–¥ Ô∏è', this.COMMANDS().BACK),
      OK: Markup.button.callback('‚úÖ', this.COMMANDS().OK),
      NO: Markup.button.callback('‚õîÔ∏è', this.COMMANDS().NO),
      CANCEL: Markup.button.callback('‚õîÔ∏è', this.COMMANDS().CANCEL),
      CONTINUE: Markup.button.callback(
        '‚û°Ô∏è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
        this.COMMANDS().CONTINUE
      ),
      START_LISTEN: Markup.button.callback(
        'üëÇ –°–ª—É—à–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
        this.COMMANDS().START_LISTEN
      ),
      ADD_TASK: Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', 'ADD_TASK'),
    };
  }

  async reload() {
    await this.onModuleInit();
  }
}
